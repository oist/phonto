<?xml version="1.0"?>


<!DOCTYPE rdf:RDF [
    <!ENTITY owl "http://www.w3.org/2002/07/owl#" >
    <!ENTITY obo "http://purl.obolibrary.org/obo/" >
    <!ENTITY xsd "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
]>


<rdf:RDF xmlns="&obo;ro.owl#"
     xml:base="&obo;ro.owl"
     xmlns:obo="http://purl.obolibrary.org/obo/"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
    <owl:Ontology rdf:about="&obo;ro.owl">
        <obo:format-version rdf:datatype="&xsd;string">1.2</obo:format-version>
        <obo:remark rdf:datatype="&xsd;string">&lt;p&gt;This ontology contains logical relations to be shared across the different OBO ontologies. Each OBO ontology is free to extend this set with relations specific to the biology within that ontology&lt;/p&gt;&lt;div class=&quot;notes&quot;&gt;&lt;p&gt;In the definitions, variables c, d, ..., p, q, ... range over instances of continuants and processes respectively. C, D, ..., P, Q, ... range over the corresponding classes&lt;/p&gt;&lt;p&gt; For a discussion of instance-level relations and also of additional axioms needed to infer transitivity and other properties of the relations listed above see &lt;a href=&quot;http://genomebiology.com/2005/6/5/R46&quot;&gt;http://genomebiology.com/2005/6/5/R46&lt;/a&gt; or the OBO relations page hosted at &lt;a href=&quot;http://obo.sourceforge.net/relationship&quot;&gt;http://obo.sourceforge.net/relationship&lt;/a&gt;&lt;/div&gt;</obo:remark>
        <obo:idspace rdf:datatype="&xsd;string">OBO_REL http://www.obofoundry.org/ro/ro.owl# &quot;OBO Relation ontology official home on OBO Foundry&quot;</obo:idspace>
        <obo:saved-by rdf:datatype="&xsd;string">cjm</obo:saved-by>
        <obo:auto-generated-by rdf:datatype="&xsd;string">cjm</obo:auto-generated-by>
        <obo:remark rdf:datatype="&xsd;string">cvs version $Revision: 1.4 $</obo:remark>
        <obo:remark rdf:datatype="&xsd;string">release version 1.01</obo:remark>
    </owl:Ontology>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <owl:AnnotationProperty rdf:about="&obo;def"/>
    <owl:AnnotationProperty rdf:about="&obo;inverse_of_on_instance_level"/>
    <owl:AnnotationProperty rdf:about="&obo;exact_synonym"/>
    <owl:AnnotationProperty rdf:about="&obo;comment"/>
    <owl:AnnotationProperty rdf:about="&obo;alt_id"/>
    <owl:AnnotationProperty rdf:about="&obo;builtin"/>
    <owl:AnnotationProperty rdf:about="&obo;instance_level_is_transitive"/>
    <owl:AnnotationProperty rdf:about="&obo;xref"/>
    <owl:AnnotationProperty rdf:about="&obo;is_anti_symmetric"/>
    <owl:AnnotationProperty rdf:about="&obo;is_obsolete"/>
    <owl:AnnotationProperty rdf:about="&obo;inverse_of"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Datatypes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Object Properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_adjacent_to -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_adjacent_to">
        <rdfs:label rdf:datatype="&xsd;string">adjacent_to</rdfs:label>
        <obo:alt_id>OBO_REL:0000012</obo:alt_id>
        <obo:instance_level_is_transitive>true</obo:instance_level_is_transitive>
        <obo:comment>Note that adjacent_to as thus defined is not a symmetric relation, in contrast to its instance-level counterpart. For it can be the case that Cs are in general such as to be adjacent to instances of C1 while no analogous statement holds for C1s in general in relation to instances of C. Examples are: nuclear membrane adjacent_to cytoplasm; seminal vesicle adjacent_to urinary bladder; ovary adjacent_to parietal pelvic peritoneum</obo:comment>
        <obo:def>&quot;C adjacent to C&#39; if and only if: given any instance c that instantiates C at a time t, there is some c&#39; such that: c&#39; instantiates C&#39; at time t and c and c&#39; are in spatial proximity&quot; [PMID:15892874]</obo:def>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_agent_in -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_agent_in">
        <rdfs:label rdf:datatype="&xsd;string">agent_in</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:has_agent</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000022</obo:alt_id>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_participates_in"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_contained_in -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_contained_in">
        <rdfs:label rdf:datatype="&xsd;string">contained_in</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:contains</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000010</obo:alt_id>
        <obo:comment>Containment obtains in each case between material and immaterial continuants, for instance: lung contained_in thoracic cavity; bladder contained_in pelvic cavity. Hence containment is not a transitive relation.    If c part_of c1 at t then we have also, by our definition and by the axioms of mereology applied to spatial regions, c located_in c1 at t. Thus, many examples of instance-level location relations for continuants are in fact cases of instance-level parthood. For material continuants location and parthood coincide. Containment is location not involving parthood, and arises only where some immaterial continuant is involved. To understand this relation, we first define overlap for continuants as follows:    c1 overlap c2 at t =def for some c, c part_of c1 at t and c part_of c2 at t. The containment relation on the instance level can then be defined (see definition):</obo:comment>
        <obo:def>&quot;C contained_in C&#39; if and only if: given any instance c that instantiates C at a time t, there is some c&#39; such that: c&#39; instantiates C&#39; at time t and c located_in c&#39; at t, and it is not the case that c *overlaps* c&#39; at t. (c&#39; is a conduit or cavity.)&quot; [PMID:15892874]</obo:def>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_contains -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_contains">
        <rdfs:label rdf:datatype="&xsd;string">contains</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:contained_in</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000011</obo:alt_id>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_derived_into -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_derived_into">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">derived_into</rdfs:label>
        <obo:alt_id>OBO_REL:0000016</obo:alt_id>
        <obo:inverse_of_on_instance_level>OBO_REL:derives_from</obo:inverse_of_on_instance_level>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_derives_from -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_derives_from">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">derives_from</rdfs:label>
        <obo:comment>Derivation as a relation between instances. The temporal relation of derivation is more complex. Transformation, on the instance level, is just the relation of identity: each adult is identical to some child existing at some earlier time. Derivation on the instance-level is a relation holding between non-identicals. More precisely, it holds between distinct material continuants when one succeeds the other across a temporal divide in such a way that at least a biologically significant portion of the matter of the earlier continuant is inherited by the later. Thus we will have axioms to the effect that from c derives_from c1 we can infer that c and c1 are not identical and that there is some instant of time t such that c1 exists only prior to and c only subsequent to t. We will also be able to infer that the spatial region occupied by c as it begins to exist at t overlaps with the spatial region occupied by c1 as it ceases to exist in the same instant.</obo:comment>
        <obo:inverse_of_on_instance_level>OBO_REL:derived_into</obo:inverse_of_on_instance_level>
        <obo:def>&quot;Derivation on the instance level (*derives_from*) holds between distinct material continuants when one succeeds the other across a temporal divide in such a way that at least a biologically significant portion of the matter of the earlier continuant is inherited by the later. We say that one class C derives_from class C&#39; if instances of C are connected to instances of C&#39; via some chain of instance-level derivation relations. Example: osteocyte derives_from osteoblast. Formally: C derives_immediately_from C&#39; if and only if: given any c and any t, if c instantiates C at time t, then there is some c&#39; and some t&#39;, such that c&#39; instantiates C&#39; at t&#39; and t&#39; earlier-than t and c *derives_from* c&#39;. C derives_from C&#39; if and only if: there is an chain of immediate derivation relations connecting C to C&#39;.&quot; [PMID:15892874]</obo:def>
        <obo:exact_synonym>&quot;derived_from&quot; []</obo:exact_synonym>
        <obo:alt_id>OBO_REL:0000015</obo:alt_id>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_has_agent -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_has_agent">
        <rdfs:label rdf:datatype="&xsd;string">has_agent</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:agent_in</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000021</obo:alt_id>
        <obo:def>&quot;As for has_participant, but with the additional condition that the component instance is causally active in the relevant process&quot; [PMID:15892874]</obo:def>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_has_participant"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_has_improper_part -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_has_improper_part">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">has_improper_part</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:improper_part_of</obo:inverse_of_on_instance_level>
        <obo:comment>See reasons for obsoletion of improper_part_of</obo:comment>
        <obo:alt_id>OBO_REL:0000024</obo:alt_id>
        <obo:is_obsolete>true</obo:is_obsolete>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_has_part"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_has_integral_part -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_has_integral_part">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">has_integral_part</rdfs:label>
        <obo:inverse_of>OBO_REL:integral_part_of</obo:inverse_of>
        <obo:alt_id>OBO_REL:0000005</obo:alt_id>
        <obo:is_anti_symmetric>true</obo:is_anti_symmetric>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_has_part"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_has_part -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_has_part">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">has_part</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:part_of</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000003</obo:alt_id>
        <obo:is_anti_symmetric>true</obo:is_anti_symmetric>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_has_participant -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_has_participant">
        <rdfs:label rdf:datatype="&xsd;string">has_participant</rdfs:label>
        <obo:def>&quot;P has_participant C if and only if: given any process p that instantiates P there is some continuant c, and some time t, such that: c instantiates C at t and c participates in p at t&quot; [PMID:15892874]</obo:def>
        <obo:alt_id>OBO_REL:0000019</obo:alt_id>
        <obo:inverse_of_on_instance_level>OBO_REL:participates_in</obo:inverse_of_on_instance_level>
        <obo:comment>Has_participant is a primitive instance-level relation between a process, a continuant, and a time at which the continuant participates in some way in the process. The relation obtains, for example, when this particular process of oxygen exchange across this particular alveolar membrane has_participant this particular sample of hemoglobin at this particular time.</obo:comment>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_has_proper_part -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_has_proper_part">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">has_proper_part</rdfs:label>
        <obo:alt_id>OBO_REL:0000007</obo:alt_id>
        <obo:inverse_of_on_instance_level>OBO_REL:proper_part_of</obo:inverse_of_on_instance_level>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_has_part"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_improper_part_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_improper_part_of">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">improper_part_of</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:has_improper_part</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000025</obo:alt_id>
        <obo:def>&quot;As for part_of, with the additional constraint that subject and object may be identical&quot; [PMID:15892874]</obo:def>
        <obo:comment>OBSOLETE. The definition is &quot;As for part_of, with the additional constraint that subject and object may be identical&quot;. However, part_of is already reflexive, therefore improper_part_of is identical to part_of. If read differently, as &quot;improper_part_of is part_of but not proper_part_of&quot;,improper_part_of becomes identity. So, improper_part_of is either identical to part_of or to identity, and not an intuitive synonym for either of them. [Robert Hoehndorf]</obo:comment>
        <obo:is_obsolete>true</obo:is_obsolete>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_part_of"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_instance_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_instance_of">
        <rdfs:label rdf:datatype="&xsd;string">instance_of</rdfs:label>
        <obo:def>&quot;A relation between an instance and a class. For components: a primitive relation between a component instance and a class which it instantiates at a specific time. For processes: a primitive relation, between a process instance and a class which it instantiates, holding independently of time&quot; [PMID:15892874]</obo:def>
        <obo:alt_id>OBO_REL:0000023</obo:alt_id>
        <obo:builtin>true</obo:builtin>
        <obo:comment>The instance_of relationship is considered axiomatic by the obo file format specification; ie it is taken for granted. The is_a relation is still included in this ontology for completeness</obo:comment>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_integral_part_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_integral_part_of">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">integral_part_of</rdfs:label>
        <obo:alt_id>OBO_REL:0000004</obo:alt_id>
        <obo:def>&quot;C integral_part_of C&#39; if and only if: C part_of C&#39; AND C&#39; has_part C&quot; [PMID:15892874]</obo:def>
        <obo:inverse_of>OBO_REL:has_integral_part</obo:inverse_of>
        <obo:is_anti_symmetric>true</obo:is_anti_symmetric>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_part_of"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_is_a -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_is_a">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">is_a</rdfs:label>
        <obo:exact_synonym>&quot;is_subtype_of&quot; []</obo:exact_synonym>
        <obo:xref>owl:subClassOf</obo:xref>
        <obo:is_anti_symmetric>true</obo:is_anti_symmetric>
        <obo:comment>The is_a relationship is considered axiomatic by the obo file format specification. In the representation of obo in OWL, where obo terms are represented as OWL classes, is_a is mapped on to the subClassOf axiom</obo:comment>
        <obo:alt_id>OBO_REL:0000001</obo:alt_id>
        <obo:builtin>true</obo:builtin>
        <obo:def>&quot;For continuants: C is_a C&#39; if and only if: given any c that instantiates C at a time t, c instantiates C&#39; at t. For processes: P is_a P&#39; if and only if: that given any p that instantiates P, then p instantiates P&#39;.&quot; [PMID:15892874]</obo:def>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_located_in -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_located_in">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">located_in</rdfs:label>
        <obo:def>&quot;C located_in C&#39; if and only if: given any c that instantiates C at a time t, there is some c&#39; such that: c&#39; instantiates C&#39; at time t and c *located_in* c&#39;. (Here *located_in* is the instance-level location relation.)&quot; [PMID:15892874]</obo:def>
        <obo:inverse_of_on_instance_level>OBO_REL:location_of</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000008</obo:alt_id>
        <obo:comment>Location as a relation between instances: The primitive instance-level relation c located_in r at t reflects the fact that each continuant is at any given time associated with exactly one spatial region, namely its exact location. Following we can use this relation to define a further instance-level location relation - not between a continuant and the region which it exactly occupies, but rather between one continuant and another. c is located in c1, in this sense, whenever the spatial region occupied by c is part_of the spatial region occupied by c1.    Note that this relation comprehends both the relation of exact location between one continuant and another which obtains when r and r1 are identical (for example, when a portion of fluid exactly fills a cavity), as well as those sorts of inexact location relations which obtain, for example, between brain and head or between ovum and uterus</obo:comment>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_location_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_location_of">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">location_of</rdfs:label>
        <obo:alt_id>OBO_REL:0000009</obo:alt_id>
        <obo:inverse_of_on_instance_level>OBO_REL:located_in</obo:inverse_of_on_instance_level>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_part_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_part_of">
        <rdf:type rdf:resource="&owl;ReflexiveProperty"/>
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">part_of</rdfs:label>
        <obo:comment>Parthood as a relation between instances: The primitive instance-level relation p part_of p1 is illustrated in assertions such as: this instance of rhodopsin mediated phototransduction part_of this instance of visual perception.    This relation satisfies at least the following standard axioms of mereology: reflexivity (for all p, p part_of p); anti-symmetry (for all p, p1, if p part_of p1 and p1 part_of p then p and p1 are identical); and transitivity (for all p, p1, p2, if p part_of p1 and p1 part_of p2, then p part_of p2). Analogous axioms hold also for parthood as a relation between spatial regions.    For parthood as a relation between continuants, these axioms need to be modified to take account of the incorporation of a temporal argument. Thus for example the axiom of transitivity for continuants will assert that if c part_of c1 at t and c1 part_of c2 at t, then also c part_of c2 at t.    Parthood as a relation between classes: To define part_of as a relation between classes we again need to distinguish the two cases of continuants and processes, even though the explicit reference to instants of time now falls away. For continuants, we have C part_of C1 if and only if any instance of C at any time is an instance-level part of some instance of C1 at that time, as for example in: cell nucleus part_ of cell.</obo:comment>
        <obo:def>&quot;For continuants: C part_of C&#39; if and only if: given any c that instantiates C at a time t, there is some c&#39; such that c&#39; instantiates C&#39; at time t, and c *part_of* c&#39; at t. For processes: P part_of P&#39; if and only if: given any p that instantiates P at a time t, there is some p&#39; such that p&#39; instantiates P&#39; at time t, and p *part_of* p&#39; at t. (Here *part_of* is the instance-level part-relation.)&quot; [PMID:15892874]</obo:def>
        <obo:inverse_of_on_instance_level>OBO_REL:has_part</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000002</obo:alt_id>
        <obo:is_anti_symmetric>true</obo:is_anti_symmetric>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_participates_in -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_participates_in">
        <rdfs:label rdf:datatype="&xsd;string">participates_in</rdfs:label>
        <obo:alt_id>OBO_REL:0000020</obo:alt_id>
        <obo:inverse_of_on_instance_level>OBO_REL:has_participant</obo:inverse_of_on_instance_level>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_preceded_by -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_preceded_by">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">preceded_by</rdfs:label>
        <obo:def>&quot;P preceded_by P&#39; if and only if: given any process p that instantiates P at a time t, there is some process p&#39; such that p&#39; instantiates P&#39; at time t&#39;, and t&#39; is earlier than t. &quot; [PMID:15892874]</obo:def>
        <obo:alt_id>OBO_REL:0000017</obo:alt_id>
        <obo:inverse_of_on_instance_level>OBO_REL:precedes</obo:inverse_of_on_instance_level>
        <obo:comment>An example is: translation preceded_by transcription; aging preceded_by development (not however death preceded_by aging). Where derives_from links classes of continuants, preceded_by links classes of processes. Clearly, however, these two relations are not independent of each other. Thus if cells of type C1 derive_from cells of type C, then any cell division involving an instance of C1 in a given lineage is preceded_by cellular processes involving an instance of C.    The assertion P preceded_by P1 tells us something about Ps in general: that is, it tells us something about what happened earlier, given what we know about what happened later. Thus it does not provide information pointing in the opposite direction, concerning instances of P1 in general; that is, that each is such as to be succeeded by some instance of P. Note that an assertion to the effect that P preceded_by P1 is rather weak; it tells us little about the relations between the underlying instances in virtue of which the preceded_by relation obtains. Typically we will be interested in stronger relations, for example in the relation immediately_preceded_by, or in relations which combine preceded_by with a condition to the effect that the corresponding instances of P and P1 share participants, or that their participants are connected by relations of derivation, or (as a first step along the road to a treatment of causality) that the one process in some way affects (for example, initiates or regulates) the other.</obo:comment>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_precedes -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_precedes">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">precedes</rdfs:label>
        <obo:inverse_of_on_instance_level>OBO_REL:preceded_by</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000018</obo:alt_id>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_proper_part_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_proper_part_of">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">proper_part_of</rdfs:label>
        <obo:def>&quot;As for part_of, with the additional constraint that subject and object are distinct&quot; [PMID:15892874]</obo:def>
        <obo:inverse_of_on_instance_level>OBO_REL:has_proper_part</obo:inverse_of_on_instance_level>
        <obo:alt_id>OBO_REL:0000006</obo:alt_id>
        <rdfs:subPropertyOf rdf:resource="&obo;OBO_REL_part_of"/>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_relationship -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_relationship">
        <rdfs:label rdf:datatype="&xsd;string">relationship</rdfs:label>
        <obo:comment>this relation was superfluous, so it has been obsoleted</obo:comment>
        <obo:def>&quot;A relationship between two classes (terms). Relationships between classes are expressed in terms of relations on underlying instances.&quot; [GOC:cjm]</obo:def>
        <obo:is_obsolete>true</obo:is_obsolete>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_transformation_of -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_transformation_of">
        <rdf:type rdf:resource="&owl;TransitiveProperty"/>
        <rdfs:label rdf:datatype="&xsd;string">transformation_of</rdfs:label>
        <obo:def>&quot;Relation between two classes, in which instances retain their identity yet change their classification by virtue of some kind of transformation. Formally: C transformation_of C&#39; if and only if given any c and any t, if c instantiates C at time t, then for some t&#39;, c instantiates C&#39; at t&#39; and t&#39; earlier t, and there is no t2 such that c instantiates C at t2 and c instantiates C&#39; at t2.&quot; [PMID:15892874]</obo:def>
        <obo:comment>When an embryonic oenocyte (a type of insect cell) is transformed into a larval oenocyte, one and the same continuant entity preserves its identity while instantiating distinct classes at distinct times. The class-level relation transformation_of obtains between continuant classes C and C1 wherever each instance of the class C is such as to have existed at some earlier time as an instance of the distinct class C1 (see Figure 2 in paper). This relation is illustrated first of all at the molecular level of granularity by the relation between mature RNA and the pre-RNA from which it is processed, or between (UV-induced) thymine-dimer and thymine dinucleotide. At coarser levels of granularity it is illustrated by the transformations involved in the creation of red blood cells, for example, from reticulocyte to erythrocyte, and by processes of development, for example, from larva to pupa, or from (post-gastrular) embryo to fetus or from child to adult. It is also manifest in pathological transformations, for example, of normal colon into carcinomatous colon. In each such case, one and the same continuant entity instantiates distinct classes at different times in virtue of phenotypic changes.</obo:comment>
        <obo:alt_id>OBO_REL:0000013</obo:alt_id>
    </owl:ObjectProperty>
    


    <!-- http://purl.obolibrary.org/obo/OBO_REL_transformed_into -->

    <owl:ObjectProperty rdf:about="&obo;OBO_REL_transformed_into">
        <rdfs:label rdf:datatype="&xsd;string">transformed_into</rdfs:label>
        <obo:alt_id>OBO_REL:0000014</obo:alt_id>
        <obo:comment>Obsoleted</obo:comment>
        <obo:is_obsolete>true</obo:is_obsolete>
    </owl:ObjectProperty>
</rdf:RDF>



<!-- Generated by the OWL API (version 3.2.3.1824) http://owlapi.sourceforge.net -->

